<!DOCTYPE html>
<html>
<head>
<title>Plink Connect for 'df -h' Disk Checks</title>
<meta charset="utf-8" />
<!--<meta http-equiv="x-ua-compatible" content="ie=edge" />-->
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<hta:application 
   id="plinkApp"
   applicationName="directoryChecks"
   border="thick"
   borderStyle="sunken"
   caption="yes"
   contextMenu="yes"
   icon=""
   innerBorder="yes"
   maximizeButton="yes"
   minimizeButton="yes"
   navigable="no"
   scroll="yes"
   scrollFlat="no"
   selection="yes"
   showInTaskBar="yes"
   singleInstance="yes"
   sysMenu="yes"
   version="1.0"
   windowState="normal"
 />


<script language="vbscript" type="text/vbscript">
Function removingSpaces(addingFileName,writingFileName)	
    Dim objFSO
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objRead = objFSO.OpenTextFile (addingFileName, 1, True,-2)
    Set objWrite = objFSO.OpenTextFile (writingFileName, 8, True,-2)
        Do Until objRead.AtEndOfStream 
        strLine = objRead.ReadLine
        arrSpaceGap = Split (strLine, " ")
        p = ""
            For each n in arrSpaceGap
                If len(n) > 0 AND n <> " " Then
                    If p = " " Then
                        p = Trim(n)				
                    Else
                        p = p & "," & Trim(n)
                    End If
                End If
            Next
            If Len(p) > 1 Then
                objWrite.writeline p
            End If
        Loop
    objRead.close
    objWrite.close
    Set objFSO = Nothing
    Set objWrite = Nothing
    Set objRead = Nothing
End Function
Function HideWindow()
    intLeft = window.screenLeft
    intTop = window.screenTop
    window.moveTo -2000,-2000
    window.moveTo intLeft,intTop
End Function
Function sleepingVB()	
	Set oShell = CreateObject("WScript.Shell")
	cmd = "%COMSPEC% /c ping -n 1 127.0.0.1>nul"
	oShell.Run cmd,0,1	
	Set oShell = Nothing
End Function
</script>

	<script type="text/javascript" language="javascript">
	 <!--
        
        
        function Set(){   // this limits the size of the window opened and positions it
            var l=(screen.width/2 - 1030/2); // centre - half the window width
            var t=(screen.height/5); // where you want it vertically
            self.moveTo(l,t);
            self.resizeTo('1030',screen.height/2); // as you can see, this example opens a longish but squat window, near the task-bar
            window.document.getElementById("sortPercent").style.visibility = "hidden"
            window.document.getElementById("spliceFileDated").style.visibility = "hidden"
            window.document.getElementById("resultTable").style.visibility = "hidden"
            }          
    
        function Minimize(){
            window.innerWidth = 100;
            window.innerHeight = 100;
            window.screenX = screen.width;
            window.screenY = screen.height;
            alwaysLowered = true;
            }

        function Maximize(){
            window.innerWidth = screen.width;
            window.innerHeight = screen.height;
            window.screenX = 0;
            window.screenY = 0;
            alwaysLowered = false;
            }    
	 
		//ver = ScriptEngine() + ' V ';
        //ver += ScriptEngineMajorVersion() + '.';
        //ver += ScriptEngineMinorVersion() + '.';
        //ver += ScriptEngineBuildVersion();
        //document.write(ver + '<br>');	   
        //document.write("Name: " + plinkApp.applicationName + "<br>"); 
        //document.write("Border: " + plinkApp.border + "<br>");
        //document.write("Border style: " + plinkApp.borderStyle + "<br>");
        //document.write("Caption: " + plinkApp.caption + "<br>");
        //document.write("Context menu: " + plinkApp.contextMenu + "<br>");
        //document.write("Command line: " + plinkApp.commandLine + "<br>");
        //document.write("Icon: " + plinkApp.icon + "<br>");
        //document.write("Inner border: " + plinkApp.innerBorder + "<br>");
        //document.write("Maximize button: " + plinkApp.maximizeButton + "<br>"); 
        //document.write("Minimize button: " + plinkApp.minimizeButton + "<br>"); 
        //document.write("Navigable: " + plinkApp.navigable + "<br>");
        //document.write("Scroll: " + plinkApp.scroll + "<br>"); 
        //document.write("Flat scrollbar: " + plinkApp.scrollFlat + "<br>");
        //document.write("Allow selection: " + plinkApp.selection + "<br>"); 
        //document.write("Show in task bar: " + plinkApp.showInTaskBar + "<br>");
        //document.write("Allow only single instance: " + plinkApp.singleInstance + "<br>");
        //document.write("System menu: " + plinkApp.sysMenu + "<br>");
        //document.write("Version: " + plinkApp.version + "<br>");
        //document.write("Window state: " + plinkApp.windowState + "<br>");

	   
		var gFile = '';   // Global
		var gpath = '';  // Global - set this prior to calling the function, eg, "C:\\Folder01\\Folder02\\mydata.txt"   
		var outputFile;
		var inputFile = '.\\df-h-copy.txt';
	   
		objFSO = new ActiveXObject("Scripting.FileSystemObject");
		ForWriting = 2;
		ForReading = 1;
		ForAppending = 8;
		CreateIt = true;
		dontWantCreateIt = false;
		AsciiMode = 0;  
		UnicodeMode = -1;
		systemDefaultMode = -2;
		var i;
		var j;
		

		
		function js_yyyymmdd_hhmmss () {
			  now = new Date();
			  year = "" + now.getFullYear();
			  month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
			  day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
			  hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
			  minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
			  second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
			  return year + month + day + "_" + hour + minute + second;
		}


		
		
		var tArr=new Array();	

		// sort tArr with SortIt(tArr)	 
		//var FileDate=Date.parse(objFSO.GetFile(gpath).DateLastModified); // get Last Modified Date of a file			
		//alert (FileDate);
		
		//ListFile(gpath,tArr,'txt'); // List the .csv files, for instance
		// The ListFile function is helpful if you want to have an array of file-names or last-modified dates, etc:
		function ListFile(thePath){  // Builds an array of found file-names in thePath folder.
			var filName='.txt';
				if(thePath.length>0 && objFSO.FolderExists(thePath)){
				var foldName=objFSO.GetFolder(thePath);
				var eNum=new Enumerator(foldName.Files);
					for(i=0;!eNum.atEnd();eNum.moveNext()){
						if((filName==".txt")||(eNum.item().name.slice(0,eNum.item().name.lastIndexOf(".")).toLowerCase().indexOf(filName) > -1)){
							//if((Ext=="*")||(eNum.item().name.slice(eNum.item().name.lastIndexOf(".")+1).toLowerCase().indexOf(Ext)>-1)){
							//tArr[i]=eNum.item().name.slice(0,eNum.item().name.lastIndexOf(".")); // Builds array of file names found
							tArr[i]=eNum.item().name;
							i++;
							//}
						}
					}
				} 
			alert (tArr.length);
			//return tArr;
				var select = document.getElementById("file2Process"); 
				var options = tArr; 
				for(i = 0; i < options.length; i++) {
					var opt = options[i];
					var el = document.createElement("option");
					el.textContent = opt;
					el.value = opt;
					select.appendChild(el);
				}			
						
			}
		
		function ProcessFile(fileSingle) {
            var newDateFileName = js_yyyymmdd_hhmmss ();
            gFile = objFSO.OpenTextFile(fileSingle,ForReading,dontWantCreateIt,AsciiMode);
            outputFile = objFSO.OpenTextFile(String('.\\output\\' + newDateFileName),ForAppending,CreateIt,AsciiMode);
            var tempStringHolder;				
            var pushHolderArray;
            var tempHolder = "";				
            var tempHolderArray =[];
                while (!gFile.AtEndOfStream){ 
                    tempStringHolder = "";
                    pushHolderArray = [];
                    tempHolder = String(gFile.readline());
                        if (tempHolder.length != 0){
                            tempHolderArray = tempHolder.split(" ");
                            if (tempHolderArray[0]!='Filesystem' && tempHolderArray.length > 1){
                                    for (i = 0; i < tempHolderArray.length; i++){
                                        if (!( tempHolderArray[i] == "  ") || !( tempHolderArray[i] == " ") ){
                                            pushHolderArray.push(tempHolderArray[i]) ;
                                        } 
                                    }
                                    //tempStringHolder = pushHolderArray[0] + ',' +pushHolderArray[pushHolderArray.length-2] + ',' + pushHolderArray[pushHolderArray.length-1];
                                    tempStringHolder = pushHolderArray.toString();
                                    //document.write(pushHolderArray.toString() + '<br>');
                                    outputFile.writeline (tempStringHolder);
                            }
                        }
                }
            gFile.close();
            outputFile.close();
			
		}
		 
		function DeleteFile() {
		if (objFSO.FileExists(gpath)) {
		   var afile = objFSO.GetFile(gpath);
		   afile.Attributes[0];
		   afile.Delete();}
		}

		 
		function CopyFile(FromFile,ToFile,overwrite) {  // Set overwrite to true or false; FromFile, etc = full paths
		  var f = objFSO.GetFile(FromFile);
		  f.Attributes[0];
		  f.Copy(ToFile,overwrite);
		}

		 
		function MakeFolder(NewFolderName,DesiredPath){
		  NewFolderName = objFSO.CreateFolder(DesiredPath); // 'DesiredFolderPath' : e.g., "C:\\MainFolder\\NewFolderName". 
		}

		 
		function DeleteFolder(){   // where gpath = full folder path
		  if (objFSO.FolderExists(gpath)) {var afolder = objFSO.GetFolder(gpath); afolder.Delete();}
		}

		 
		function CopyFolder(FromFolder,ToFolder,overwrite) {  // where FromFolder, etc = full folder paths
		  var f = objFSO.GetFolder(FromFolder);
		  f.Copy(ToFolder,overwrite);
		}

        function CheckMakeFolder(NewFolderName) {
		  if (objFSO.FolderExists(NewFolderName)) {} else {var afolder = objFSO.CreateFolder(NewFolderName);} 
        }

        function findMountedOn (outputedFile) {
            if (!objFSO.FileExists(outputedFile)) {
                alert ('No output file present! \rPlease run at least one sucessful plink session.');
                window.location.reload();
                return false;
            } else {
                jsObjFolder = objFSO.GetFile(outputedFile);
                if(jsObjFolder.size > 0) {
                    outputFile = objFSO.OpenTextFile(outputedFile,ForReading,dontWantCreateIt,AsciiMode);
                    var tempHolderArray =[];
                    var lastHolderArray =[];
                    var tempHolder;
                    while (!outputFile.AtEndOfStream){ 
                        tempHolder = String(outputFile.readline());
                        if (tempHolder.length > 0){
                            tempHolderArray = tempHolder.split(',');
                            if (lastHolderArray.indexOf(tempHolderArray[tempHolderArray.length-1]) === -1) {
                            lastHolderArray.push(tempHolderArray[tempHolderArray.length-1])
                            }
                        } 
                    }
                    outputFile.Close();
                    return lastHolderArray;
                }
            }
        }

        function checkboxEachSpliceName (element, index, array) {
            checkboxList = window.document.createElement('input');
            checkboxList.type = "checkbox";
            checkboxList.name = element;
            checkboxList.value = element;
            checkboxList.id = element;

            labelList = document.createElement('label')
            labelList.htmlFor = element;
            labelList.appendChild(window.document.createTextNode(element));

            fileListDiv = window.document.getElementById('spliceLists');
            fileListDiv.appendChild(checkboxList);
            fileListDiv.appendChild(labelList);	
            fileListDiv.appendChild(document.createElement("br"));
		   }

        function countingDigits(numbersIn){
            var numLength = numbersIn.toString();
            switch(numLength.length) {
                case 1:
                    return '00' + numLength;
                    break;
                case 2:
                    return '0' + numLength;
                    break;
                default:
                    return numbersIn.toString();
            }
        }
            

		function Connecting(){//connect to each server using PLINK and collect DF-H
            CheckMakeFolder('.\\input');
            CheckMakeFolder('.\\output');
            
            var newDateFileName = js_yyyymmdd_hhmmss ();
			var WshShell = new ActiveXObject("WScript.Shell");
			var listServers = document.getElementById('textAreaListServers').value
			var splitListServers = listServers.split('\n');
			for( i=0; i < splitListServers.length; i++) {
				// Plink to the server
				var ExecOperation = WshShell.Exec('.\\bin\\plink.exe ' + String(splitListServers[i]) + ' -l ' + String(document.getElementById("strUser").value) + ' -pw ' + String(document.getElementById("strPassword").value) + ' -batch -m .\\bin\\df-h.txt');

				// Check the operation's status
				while (ExecOperation.Status == 0){}

				// Get the operation's exit code
				var ExCode = ExecOperation.ExitCode;

				// Get the application's StdOut stream
				var StdOut = ExecOperation.StdOut;

				if (ExCode == 0){
				var plinkResult = StdOut.ReadAll();
				//outputFile = objFSO.OpenTextFile(String('.\\temp\\' + newDating + '.txt'),ForAppending,CreateIt,AsciiMode);
                DeleteFile('.\\input\\99999999_999999');
				outputFile = objFSO.OpenTextFile('.\\input\\99999999_999999',ForWriting,CreateIt,AsciiMode);
				outputFile.write (plinkResult);
				outputFile.close();
                outputFile0 = objFSO.OpenTextFile('.\\input\\99999999_999999',ForReading,dontWantCreateIt,AsciiMode);
                outputFile1 = objFSO.OpenTextFile('.\\input\\' + newDateFileName ,ForAppending,CreateIt,AsciiMode);
                    while (!outputFile0.AtEndOfStream){                         
                        tempHolder = String(outputFile0.readline());
                        //alert(tempHolder);
                        if (!(tempHolder.indexOf('Filesystem') > -1)) {
                            
                            outputFile1.writeline (String(splitListServers[i]) + ' ' + tempHolder );//label each results into formatted text file.
                        }
                    }
                outputFile0.Close();
                outputFile1.Close();                
				}				
			}
            removingSpaces('.\\input\\' + newDateFileName,'.\\output\\' + newDateFileName);
            DeleteFile('.\\input\\99999999_999999');
            ListFilesJSs('.\\output');//collect all results
            lastHolderArray = findMountedOn ('.\\output\\' + newDateFileName); //ony collect last column of last file output
                if (lastHolderArray != false) {
                    window.document.getElementById("spliceFileDated").style.visibility = "visible"
                    fileListDiv = window.document.getElementById('spliceLists');
                        while (fileListDiv.hasChildNodes()) {   
                            fileListDiv.removeChild(fileListDiv.firstChild);
                        }  
                        lastHolderArray.forEach(checkboxEachSpliceName);
                        //lastHolderArray.forEach(function(element) {alert (element);});
                        self.resizeTo('1','1'); 
                        sleepingVB();
                        self.resizeTo('1030',screen.height/1.2); 
                }
		}


        function ListFilesJSs(PickFolderObject) {//list all files
            var jsObjFolder, objFiles, checkboxList, labelList, fileListDiv, tempName, sizeNameFiles;
            fileListDiv = window.document.getElementById('fileListJS');
            while (fileListDiv.hasChildNodes()) {   
                fileListDiv.removeChild(fileListDiv.firstChild);
            }
            jsObjFolder = objFSO.GetFolder(PickFolderObject);		
            objFiles = new Enumerator(jsObjFolder.files);
            //var n = 1;
            for (; !objFiles.atEnd(); objFiles.moveNext()){
                if (objFiles.item().name != '99999999_999999') {
                    checkboxList = window.document.createElement('input');
                    checkboxList.type = "checkbox";
                    checkboxList.name = objFiles.item();
                    checkboxList.value = objFiles.item();
                    checkboxList.id = objFiles.item();

                    labelList = document.createElement('label')
                    labelList.htmlFor = objFiles.item();
                    sizeNameFiles = String(objFiles.item().name + ' Filesize = ' + objFiles.item().size + ' bytes');
                    labelList.appendChild(window.document.createTextNode(sizeNameFiles));

                    fileListDiv = window.document.getElementById('fileListJS');
                    fileListDiv.appendChild(checkboxList);
                    fileListDiv.appendChild(labelList);	
                    fileListDiv.appendChild(document.createElement("br"));
                    if (objFiles.item().size > 0) {tempName = objFiles.item()}
                    }
                }
            return tempName;
        }


        function collectPastFiles() {            
            //alert (ListFilesJSs('.\\output'));

                lastHolderArray = findMountedOn (ListFilesJSs('.\\output'));
                if (lastHolderArray != false){
                    window.document.getElementById("spliceFileDated").style.visibility = "visible"
                    fileListDiv = window.document.getElementById('spliceLists');
                        while (fileListDiv.hasChildNodes()) {   
                            fileListDiv.removeChild(fileListDiv.firstChild);
                        }
                        lastHolderArray.forEach(checkboxEachSpliceName);
                        //lastHolderArray.forEach(function(element) {alert (element);});
                        self.resizeTo('1','1'); 
                        sleepingVB();
                        self.resizeTo('1030',screen.height/1.2);                    
                }

        }


        function checkboxParser() {
            var typeElement;
            var tempHolder = '';
            var checkboxesChecked = [];
            var serverSpliceName = [];
            var selectedFileName = [];
            var countingLines = 0;
            
            var i;
            var j;
            for (i = 0; i < window.document.checkboxDFH.elements.length; i++ ) {
                typeElement = checkboxDFH.elements[i].type;
                if (checkboxDFH.elements[i].checked==true && typeElement=="checkbox") {
                    checkboxesChecked.push(checkboxDFH.elements[i].name);
                }
            }
            if (typeof(checkboxesChecked) !== 'undefined' && checkboxesChecked.length > 0) {
                for (i = 0; i < checkboxesChecked.length; i++ ) {
                    if(checkboxesChecked[i].indexOf('\\') > 0) {
                        selectedFileName.push(checkboxesChecked[i]);
                    } else {
                        serverSpliceName.push(checkboxesChecked[i]);
                        
                    }
                }
            }
            if (selectedFileName.length > 0) {
                if(serverSpliceName.length > 0) {
                    var newDateFileName = js_yyyymmdd_hhmmss ();
                    outputFile1 = objFSO.OpenTextFile(String('.\\output\\result_' + newDateFileName),ForAppending,CreateIt,AsciiMode);    
                        for (i = 0; i < selectedFileName.length; i++ ){
                            outputFile0 = objFSO.OpenTextFile(selectedFileName[i],ForReading,dontWantCreateIt,AsciiMode);
                            while (!outputFile0.AtEndOfStream){                         
                                tempHolder = String(outputFile0.readline());
                                for (j = 0; j < serverSpliceName.length; j++ ){
                                    if (tempHolder.indexOf(serverSpliceName[j]) > -1) {
                                        countingLines += 1;
                                        outputFile1.writeline (countingLines + tempHolder );
                                    }
                                }
                            }
                            outputFile0.Close();
                        }
                    outputFile1.Close();
                } else {
                    alert ("Please select at least one 'Mounted On' slice to process.");
                    return false;
                }
            } else {
                alert ("Please select at least one 'dated files' to process.");
                return false;
            }  
        }

        function fillTableRows() {
            fileListDiv = window.document.getElementById('resultTable');
            while (fileListDiv.hasChildNodes()) {   
                fileListDiv.removeChild(fileListDiv.firstChild);
            } 
        }


		function jumpToElementsortingValue() {
            if (window.document.getElementById("sortPercent").style.visibility == "visible") {
            window.document.getElementById("sortPercent").style.visibility = "hidden"
            } else {window.document.getElementById("sortPercent").style.visibility = "visible"}
			//var tempSelected = document.getElementById("showColor").value;
			window.location.hash = '#sortingValue';
		}
		
		function jumpToElementgreenValue(){
			//var tempSelected = document.getElementById("showColor").value;
			window.location.hash = '#greenValue';
		}

				
	 -->
	</script>
 
</head>
<body onload="Set()">
<table width="50%" border=1>
<tr><td colspan=2>List of servers to connect through Plink. <br>If using name, make sure name to IP mapping is functioning correctly.</td></tr>
<tr><td rowspan=2><TEXTAREA style="Height:80px;font-Size:12;font-weight:normal;";TITLE=""; id="textAreaListServers"; WRAP=hard>
192.168.11.100</TEXTAREA></td>
<td>Username <input type="text" id="strUser" value='' style="width:260px;background-color:#f48942" ></td></tr>
<tr><td>Password <input type="password" id="strPassword" value='' style="width:260px;background-color:#f48942" ></td></tr>
</table>


     

<table width="50%" border=0>
<tr><td align=left ><input type="button" style="width:140px;height:25px" value="Connect" onClick="Connecting()" title="Begin connect to servers."></td></tr>
<tr><td align=left ><input type="button" style="width:140px;height:25px" value="View Past Results" onClick="collectPastFiles()" title="Load previous sessions from ouput folder."></td></tr>
</table>    

<br><br>
<hr  align="left" width="50%"></hr> 


<div id='spliceFileDated'> 
<table width="50%" border=0>
<form name='checkboxDFH'>
<tr><td align=left >Select 'Mounted On' slice.</td><td align=left>Select dated files to process.</td></tr>
<tr><td><div id='spliceLists'></div></td></td><td><div id='fileListJS'></div></td></tr>
</form>    
<tr><td>&nbsp</td>
</table>
</div>

<table width="50%" border=0>
<td align=left><input type="button" style="width:120px;height:25px" value="Create Report" onClick="checkboxParser()" title="Generate percentage report."></td>
<td align=left><input type="button" style="width:120px;height:25px" value="Reset Page" onClick="window.location.reload()" title="Clear page to default."></td></tr>
</table> 

<tr><th colspan=3 align=left>Volume percent reporting.</th>
</tr>
<tr><td colspan=3>
<input type="checkbox" name="showColor" id="showColor" onchange="jumpToElementsortingValue()"> <label for="showColor">Show usage color in report.</label>
</td></tr>
</table>

    
<div id='sortPercent'>    
<table>
<tr><td>Sort by</td><td colspan=2 align=left>
<select name="sortingValue"  id="sortingValue" style='width:170px;' onchange="jumpToElementgreenValue()">
	<option value="" disabled selected>Select
	<option value="default">Default Sorting</option>
	<option value="largeSize">Largest volume</option>
	<option value="smallSize">Smallest volume</option>
</select></td>
</tr>
<tr><td>Under</td><td align=left>	
<select name="greenValue"  id="greenValue">
	<option value="" disabled selected>Select</option>
	<option value="50"> &nbsp 50% </option>
	<option value="55"> &nbsp 55% </option>
	<option value="60"> &nbsp 60% </option>
	<option value="65"> &nbsp 65% </option>
	<option value="70"> &nbsp 70% </option>
	<option value="75"> &nbsp 75% </option>
	<option value="80"> &nbsp 80% </option>
	<option value="85"> &nbsp 85% </option>
	<option value="90"> &nbsp 90% </option>
</select></td><td>is green status. Over percent is red.</td>
</tr>
</table>
</div>


<div id='resultTable'>
<table border=1>
<tr><th>Server ID</th><th>Filesystem</th><th>size</th><th>used</th><th>avail</th><th>capacity</th><th>Mounted on</th></tr>
</table>    
</div>     

</body>
</html>